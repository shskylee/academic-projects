1. Odd Even Linked List

Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.
You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.

Example:
Given 1->2->3->4->5->NULL,
return 1->3->5->2->4->NULL.
Note:
The relative order inside both the even and odd groups should remain as it was in the input. 
The first node is considered odd, the second node even and so on ...

Answer:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(!head) return NULL;
        ListNode *p=head, *q=head;
        ListNode *even_head=q->next;
        while(p){
            q=q->next;
            if (!q || !q->next) break;
            ListNode *next_p=q->next,*next_q=next_p->next;
            p->next=next_p;
            q->next=next_q;
            next_p->next=even_head;
            p=next_p;
            
        }
        return head;
    }
};
2
Given an integer, write a function to determine if it is a power of three.
Follow up:
Could you do it without using any loop / recursion?

Loop/Recursion

class Solution {
public:
    bool isPowerOfThree(int n) {
        while(n%3){
            n /= 3;
        }
        return n == 1;
    }
};

Without Loop/Recursion
class Solution {
public:
    bool isPowerOfThree(int n) {
        if(n>0){
              return n == pow(3, round(log(n) / log(3)));
        }else{
            return false;
        }
    }
};
3 Range Sum Query - Immutable
Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.
Example:
Given nums = [-2, 0, 3, -5, 2, -1]

sumRange(0, 2) -> 1
sumRange(2, 5) -> -1
sumRange(0, 5) -> -3

Note:
	1	You may assume that the array does not change.
	2	There are many calls to sumRange function.

Solution:

class NumArray {
public:
    NumArray(vector<int> &nums) {
     N=nums.size();
     if(N>0){
        for (int i=0;i<N;i++){
              cumul_sums.push_back(0);
        }
        cumul_sums[0]=nums[0];
        for(int i=1;i<N;i++){
            cumul_sums[i]=cumul_sums[i-1]+nums[i];
        }
     }
    }
    int sumRange(int i, int j) {
        if(N>0){
            if(i==0){
                return cumul_sums[j];
            }else{
                return cumul_sums[j]-cumul_sums[i-1];
            }
        }
        
    }
//private:    
    int N;
    vector<int> cumul_sums;
};


// Your NumArray object will be instantiated and called as such:
// NumArray numArray(nums);
// numArray.sumRange(0, 1);
// numArray.sumRange(1, 2);

4 Bulls and Cows

You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called "bulls") and how many digits match the secret number but locate in the wrong position (called "cows"). Your friend will use successive guesses and hints to eventually derive the secret number.
For example:
Secret number:  "1807"
Friend's guess: "7810"
Hint: 1 bull and 3 cows. (The bull is 8, the cows are 0, 1 and 7.)

Write a function to return a hint according to the secret number and friend's guess, use A to indicate the bulls and B to indicate the cows. In the above example, your function should return "1A3B".
Please note that both secret number and friend's guess may contain duplicate digits, for example:
Secret number:  "1123"
Friend's guess: "0111"
In this case, the 1st 1 in friend's guess is a bull, the 2nd or 3rd 1 is a cow, and your function should return "1A1B".

You may assume that the secret number and your friend's guess only contain digits, and their lengths are always equal.


class Solution {
public:
    string getHint(string secret, string guess) {
        int bull=0,cow=0;
        int* count= new int[10]();
        for(int i=0;i<secret.size();i++){
            int a=secret.at(i)-'0',b=guess.at(i)-'0';
            if(a==b){
                bull++;
            }else{
                if(count[a]<0) cow++;
                if(count[b]>0) cow++;
                count[a]++;
                count[b]--;
            }
        }
        return to_string(bull)+"A"+to_string(cow)+"B";
    }
    
};

5Nim Game
You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.
Both of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.
For example, if there are 4 stones in the heap, then you will never win the game: no matter 1, 2, or 3 stones you remove, the last stone will always be removed by your friend.

Answer:
class Solution {
public:
    bool canWinNim(int n) {
        return n%4!=0;
    }
};

6 Word Pattern

Given a pattern and a string str, find if str follows the same pattern.
Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.
Examples:
	1	pattern = "abba", str = "dog cat cat dog" should return true.
	2	pattern = "abba", str = "dog cat cat fish" should return false.
	3	pattern = "aaaa", str = "dog cat cat dog" should return false.
	4	pattern = "abba", str = "dog dog dog dog" should return false.

Notes:
You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.

Answer:

class Solution {
public:
    bool wordPattern(string pattern, string str) {
        map<char,string> letter_word;
        map<string,int>  word_count;
        int count=0;
        for(int i=0;i<pattern.size();i++){
            char letter=pattern.at(i);
            string word;
            while(count<str.size()&&!isspace(str.at(count))){
                word.push_back(str.at(count));
                count++;
            }
            count++;
            if(count>str.size()&&i<pattern.size()-1) return false;
            auto search=letter_word.find(letter);
            auto search_count=word_count.find(word);
            if(search==letter_word.end()&&search_count==word_count.end()){
                letter_word.insert({letter,word});
                word_count.insert({word,1});
            }else{
                if(search->second!=word) return false;
            }
        }
        if(count<str.size()) return false;
        
        return true;
        
    }
};

7 Move Zeroes

Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.
For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].
Note:
	1	You must do this in-place without making a copy of the array.
	2	Minimize the total number of operations.

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        
        int zeros=0;
        int len=nums.size();
        for(int i=0;i<len;i++){
            if(nums[i]==0){
                zeros++;
            }else{
                nums[i-zeros]=nums[i];
            }
        }
       
        for(int i=1;i<=zeros;i++){
            nums[len-i]=0;
        }
        
    }
};

8 First Bad Version

You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.
Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.
You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

bool isBadVersion(int version);

class Solution {
public:
    int firstBadVersion(int n) {
        int low=1,high=n;
        int middle;
        while(low + 1 < high){
            middle=low+(high-low)/2;
            if(isBadVersion(middle)){
                high=middle;
                
            }else{
                low=middle;
            }
        }
        if(isBadVersion(low)){
            return low;
        }else if(isBadVersion(high)){
            return high;
        }
    
        return -1;
        
    }
};

9Ugly Number

Write a program to check whether a given number is an ugly number.
Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. For example, 6, 8 are ugly while 14 is not ugly since it includes another prime factor 7.
Note that 1 is typically treated as an ugly number.

class Solution {
public:
    bool isUgly(int num) {
        if(num<=0){
            return false;
        }else if(num==1){
            return true;
        }else{
            int p[3]={2,3,5};
            for(int i=0;i<3;i++){
                while(num%p[i]==0){
                    num /= p[i];
                }
            }
            if(num==1) return true;
            else return false;
            
        }
    }

};

10

Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.
For example:
Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.
Follow up:
Could you do it without any loop/recursion in O(1) runtime?

class Solution {
public:
    int addDigits(int num) {
        if(num==0) return 0;
        if (num%9==0){
            return 9;
        }else{
            return num%9;
        }
    }
};

11Binary Tree Paths

Given a binary tree, return all root-to-leaf paths.
For example, given the following binary tree:

   1
 /   \
2     3
 \
  5

All root-to-leaf paths are:
["1->2->5", "1->3"]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> result;
        if(root) DFS(root,"",result);
        return result;
    }
    void DFS(TreeNode* root, string s, vector<string> &res){
         s += to_string(root->val);
         if(!root->left && !root->right) res.push_back(s);
         else{
             if(root->left) DFS(root->left,s+"->",res);
             if(root->right) DFS(root->right,s+"->",res);
         }
         
    }
};


12 Valid Anagram

Given two strings s and t, write a function to determine if t is an anagram of s.
For example,
s = "anagram", t = "nagaram", return true.
s = "rat", t = "car", return false.
Note:
You may assume the string contains only lowercase alphabets.

class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size()!=t.size()) return false;
        int len=s.size();
        int* letter=new int[256]();
        for(int i=0;i<len;i++){
            int a=s.at(i)-'0';
            letter[a]++;
        }
        for(int i=0;i<len;i++){
            int a=t.at(i)-'0';
            letter[a]--;
        }
        for(int i=0;i<256;i++){
            if(letter[i]!=0)
              return false;
        }
        return true;
    }
};

13  Delete Node in a Linked List
My Submissions
Question
Total Accepted: 60862 Total Submissions: 139119 Difficulty: Easy

Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.
Supposed the linked list is 1 -> 2 -> 3 -> 4 and you are given the third node with value 3, the linked list should become 1 -> 2 -> 4 after calling your function.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void deleteNode(ListNode* node) {
        ListNode* p=node;
        p->val=p->next->val;
        p->next=p->next->next;
    }
};

14 Lowest Common Ancestor of a Binary Search Tree

Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”
        _______6______
       /              \
    ___2__          ___8__
   /      \        /      \
   0      _4       7       9
         /  \
         3   5
For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
        if (!root || root == p || root == q) return root;
        TreeNode* left = lowestCommonAncestor(root->left, p, q);
        TreeNode* right = lowestCommonAncestor(root->right, p, q);
        return !left ? right : !right ? left : root;
    
        
    }
};

15 Palindrome Linked List
Given a singly linked list, determine if it is a palindrome.
Follow up:
Could you do it in O(n) time and O(1) space?

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(!head) return true;
        ListNode *slow=head,*fast=head;
        while(fast->next!=NULL && fast->next->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        slow=slow->next;
        ListNode *prev=NULL,*current=slow,*pnext=NULL;
        while(current!=NULL){
            pnext=current->next;
            current->next=prev;
            prev=current;
            current=pnext;
        }
        fast=head;
        slow=prev;
        while(slow!=NULL){
            if(slow->val!=fast->val){
                return false;
            }
            slow=slow->next;
            fast=fast->next;
            
        }
        
        return true;
        
        
    }
};

16 Implement Queue using Stacks

Implement the following operations of a queue using stacks.
	•	push(x) -- Push element x to the back of queue.
	•	pop() -- Removes the element from in front of queue.
	•	peek() -- Get the front element.
	•	empty() -- Return whether the queue is empty.
Notes:
	•	You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.
	•	Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
	•	You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).

class Queue {
public:
    // Push element x to the back of queue.
    void push(int x) {
        s1.push(x);
    }

    // Removes the element from in front of queue.
    void pop(void) {
        int a=this->peek();
        s2.pop();
    }

    // Get the front element.
    int peek(void) {
        if(!s2.empty()){
            return s2.top();
        }else{
            while(!s1.empty()){
                s2.push(s1.top());
                s1.pop();
            }
            return s2.top();
        }
    }  

    // Return whether the queue is empty.
    bool empty(void) {
        return s1.empty()&&s2.empty();
    }
    stack<int> s1;
    stack<int> s2;
};

17

Power of Two

Given an integer, write a function to determine if it is a power of two.


class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n<=0) return false;
        if(n==1) return true;
        while(n%2==0){
            n /= 2;
        }
        return n==1;
    }
};

18Summary Ranges

Given a sorted integer array without duplicates, return the summary of its ranges.
For example, given [0,1,2,4,5,7], return ["0->2","4->5","7"].


class Solution {
public:
    vector<string> summaryRanges(vector<int>& nums) {
       vector<string> str;
       if(nums.size()==0) return str;
       if(nums.size()==1) str.push_back(to_string(nums[0]));
       int count=0;
       for(int i=1;i<nums.size();i++){
           if(nums[i]==nums[i-1]+1){
               count++;
           }else{
               if(count==0) str.push_back(to_string(nums[i-1]));
               else str.push_back(to_string(nums[i-1-count])+"->"+to_string(nums[i-1]));
               count=0;
           }
           if(i==nums.size()-1){
               if(count!=0){
                   str.push_back(to_string(nums[i-count])+"->"+to_string(nums[i]));
               }else{
                   str.push_back(to_string(nums[i]));
               }
           }
       }
       return str;
    }
};


19 Invert Binary Tree

Invert a binary tree.
     4
   /   \
  2     7
 / \   / \
1   3 6   9
to
     4
   /   \
  7     2
 / \   / \
9   6 3   1

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(!root) return NULL;
        TreeNode* left=invertTree(root->left);
        TreeNode* right=invertTree(root->right);
        TreeNode *p=root->left;
        root->left=root->right;
        root->right=p;
    }
};

20 Implement Stack using Queues
Implement the following operations of a stack using queues.
	•	push(x) -- Push element x onto stack.
	•	pop() -- Removes the element on top of the stack.
	•	top() -- Get the top element.
	•	empty() -- Return whether the stack is empty.
Notes:
	•	You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
	•	Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
	•	You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).
	•	
class Stack {
public:
    // Push element x onto stack.
    void push(int x) {
        
        if(q2.empty()){
            q2.push(x);
        }else{
            q1.push(q2.front());
            q2.pop();
            q2.push(x);
        }
    }

    // Removes the element on top of the stack.
    void pop() {
        int a=this->top();
         q2.pop();
         
    }
   
    // Get the top element.
    int top() {
        if(q2.empty()){
            while(!q1.empty()){
                q2.push(q1.front());
                q1.pop();
            }
            while(q2.size()>1){
                q1.push(q2.front());
                q2.pop();
                
            }
        }
        return q2.front();
    }

    // Return whether the stack is empty.
    bool empty() {
        return q1.empty()&&q2.empty();
    }
    queue<int> q1,q2;
};

class Stack {
public:
    // Push element x onto stack.
    void push(int x) {
        q1.push(x);
        int s=q1.size();
        while(s>1){
            q1.push(q1.front());
            q1.pop();
            s--;
        }
       
    }

    // Removes the element on top of the stack.
    void pop() {
       if(!q1.empty()) q1.pop();
       
    }
   
    // Get the top element.
    int top() {
        if(!q1.empty()) return q1.front();
    }

    // Return whether the stack is empty.
    bool empty() {
        return q1.empty();
    }
    queue<int> q1;
};

21 Contains Duplicate II

Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the difference between i and j is at most k.

class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        map<int,int> nums_pos;
        for(int i=0;i<nums.size();i++){
            auto search=nums_pos.find(nums[i]);
            if(search!=nums_pos.end()){
                if(i-search->second<=k) return k;
                else search->second=i;
            }else{
                nums_pos.insert({nums[i],i});
            }
        }
        return false;
    }
};
22 Contains Duplicate

Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        map<int,int> nums_exists;
        for(int i=0;i<nums.size();i++){
            auto search=nums_exists.find(nums[i]);
            if(search!=nums_exists.end()) return true;
            else nums_exists.insert({nums[i],1});
        }
        return false;
    }
};

23 Reverse Linked List

Reverse a singly linked list.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(!head ||!head->next) return head;
        ListNode *prev=NULL,*current=head,*pnext=NULL;
        while(current!=NULL){
            pnext=current->next;
            current->next=prev;
            prev=current;
            current=pnext;
        }
        return prev;
        
    }
};

24 Isomorphic Strings

Given two strings s and t, determine if they are isomorphic.
Two strings are isomorphic if the characters in s can be replaced to get t.
All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.
For example,
Given "egg", "add", return true.
Given "foo", "bar", return false.
Given "paper", "title", return true.

class Solution {
public:
    bool isIsomorphic(string s, string t) {
        
        if(s.length()!=t.length()) return false;
        map<char,char> s_to_t,t_to_s;
        for(int i=0;i<s.size();i++){
            auto search1=s_to_t.find(s[i]);
            auto search2=t_to_s.find(t[i]);
            if(search1==s_to_t.end()&&search2==t_to_s.end()){
                s_to_t.insert({s[i],t[i]});
                t_to_s.insert({t[i],s[i]});
            }else if((search1==s_to_t.end()&&search2!=t_to_s.end())||(search1!=s_to_t.end()&&search2==t_to_s.end())){
                return false;
            }else{
                if(search1->second!=t[i]||search2->second!=s[i]) return false;
            }
            
        }
        return true;
    }
};

25Count Primes

Description:
Count the number of prime numbers less than a non-negative number, n.

class Solution {
public:
    int countPrimes(int n) {
        if(n<=2) return 0;
        vector<bool> a(n,true);
        for(int i=2;i<sqrt(n);i++){
            if(a[i]==true){
                int j=pow(i,2);
                while(j<n){
                    a[j]=false;
                    j=j+i;
                }
            }
        }
        int count=0;
        for(int i=2;i<n;i++){
            if(a[i]==true) count++;
        }
        return count;
    }
};

26 Remove Linked List Elements

Remove all elements from a linked list of integers that have value val.
Example
Given: 1 --> 2 --> 6 --> 3 --> 4 --> 5 --> 6, val = 6
Return: 1 --> 2 --> 3 --> 4 --> 5

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
       if(head==NULL) return NULL;
       head->next=removeElements(head->next,val);
       return head->val==val?head->next:head;
    }
};

27 Happy Number


Write an algorithm to determine if a number is "happy".
A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.
Example: 19 is a happy number
		12 + 92 = 82
		82 + 22 = 68
		62 + 82 = 100
		12 + 02 + 02 = 1

class Solution {
public:
    bool isHappy(int n) {
        if(n<1) return false;
        map<int,int> nums;
        while(n!=1&&nums.find(n)==nums.end()){
            nums.insert({n,1});
            int sum=0;
            while(n>0){
                int a=n%10;
                sum+=pow(a,2);
                n /= 10;
            }
            n=sum;
        }
        return n==1;
    }
};

28 House Robber

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.
Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.

class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.size()==0) return 0;
        if(nums.size()==1) return nums[0];
        vector<int> dp_money;
        dp_money.push_back(nums[0]);
        dp_money.push_back(max(nums[0],nums[1]));
        for(int i=2;i<nums.size();i++){
            dp_money.push_back(max(dp_money[i-2]+nums[i],dp_money[i-1]));
        }
        return dp_money.back();
        
    }
};

29Number of 1 Bits

Write a function that takes an unsigned integer and returns the number of ’1' bits it has (also known as the Hamming weight).
For example, the 32-bit integer ’11' has binary representation 00000000000000000000000000001011, so the function should return 3.

class Solution {
public:
    int hammingWeight(uint32_t n) {
        int nums=0;
        if(n==0) return 0;
        while(n>0){
            if(n&1) nums++;
            n=n>>1;
        }
        return nums;
    }
};

30 Reverse Bits

Reverse bits of a given 32 bits unsigned integer.
For example, given input 43261596 (represented in binary as 00000010100101000001111010011100), return 964176192 (represented in binary as 00111001011110000010100101000000).
Follow up:
If this function is called many times, how would you optimize it?
Related problem: Reverse Integer


class Solution {
public:
    uint32_t reverseBits(uint32_t n) {
        if(n==0) return 0;
        uint32_t sum=0;
        uint32_t i=0;
        while(n>0){
            if(n&1) sum += pow(2,31-i);
            i++;
            n=n>>1;
        }
        return sum;
    }
};

31 Rotate Array

Rotate an array of n elements to the right by k steps.
For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].
Note:
Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.


class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int idx=0;
        int len=nums.size();
        int b=nums[0];
        int distance=0;
        for(int i=0;i<len;i++){
            idx=(idx+k)%len;
            int a=nums[idx];
            nums[idx]=b;
            b=a;
            distance = (distance + k) % len;
            if(distance ==0){
                idx = (idx + 1) % len;
                b = nums[idx];
            }
        }
        
    }
};

32 Factorial Trailing Zeroes

Given an integer n, return the number of trailing zeroes in n!.
Note: Your solution should be in logarithmic time complexity.

class Solution {
public:
    int trailingZeroes(int n) {
        int zeros=0;
        int k=floor(log(n)/log(5));
        for(int i=1;i<=k;i++){
            zeros+=floor(n/pow(5,i));
        }
        return zeros;
    }
};

33 Excel Sheet Column Number

Related to question Excel Sheet Column Title
Given a column title as appear in an Excel sheet, return its corresponding column number.
For example:
    A -> 1
    B -> 2
    C -> 3
    ...
    Z -> 26
    AA -> 27
    AB -> 28 

class Solution {
public:
    int titleToNumber(string s) {
        int len=s.size();
        int sum=0;
        for(int i=0;i<len;i++){
            sum += (pow(26,len-1-i))*(s.at(i)-'A'+1);
        }
        return sum;
    }
};

34 Majority Element

Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.
You may assume that the array is non-empty and the majority element always exist in the array.

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        map<int,int> counts;
        int n=nums.size();
        if(n==1) return nums[0];
        int major=floor(n/2);
        for(int i=0;i<n;i++){
            auto search=counts.find(nums[i]);
            if(search==counts.end()){
                counts.insert({nums[i],1});
            }else{
                search->second++;
                if(search->second>major) return nums[i];
            }
        }
        return INT_MAX;
    }
};
